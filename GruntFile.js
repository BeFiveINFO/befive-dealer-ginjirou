module.exports = function (grunt) {
	var pkg = grunt.file.readJSON('package.json');

	var taskName;
	for(taskName in pkg.devDependencies) {
		if(taskName.substring(0, 6) == 'grunt-') {
			grunt.loadNpmTasks(taskName);
		}
	}

	// version number
	var toDoubleDigits = function(num) {
		num += "";
		if (num.length === 1) {
			num = "0" + num;
		}
		return num;
	};
	var date = new Date();
	var year = date.getYear().toString().substr( 1,2 );
	var month = toDoubleDigits(date.getMonth().toString());
	var day = toDoubleDigits(date.getDay().toString());
	var hour = toDoubleDigits(date.getHours().toString());
	var minute = toDoubleDigits(date.getMinutes().toString());
	var second = toDoubleDigits(date.getSeconds().toString());
	var auto_generated_game_version = 'BE-DG-' + year+month+day+'-'+hour+minute;

	/*
		Grunt Tasks
	*/
	// grunt.registerTask('default', ['watch', 'concat','uglify']);
	grunt.registerTask('default', ['connect', 'watch']);
	// normal build without cleaning
	grunt.registerTask('build', ['cmq','autoprefixer','csscomb','cssmin','concat','replace','uglify','usebanner','copy']);
	// warning; clean build erase the release directory then recreate the directory
	grunt.registerTask('clean-build', ['clean','cmq','autoprefixer','csscomb','cssmin','concat','replace','uglify','usebanner','copy']);

	grunt.initConfig({
		pkg: grunt.file.readJSON('package.json'),
		/**
			server related
			*/
		// connect to server
		connect: {
			server: {
				options: {
					port: 8080,
					base: './release',
					open: false
				}
			}
		},
		// open in the default browser upon execution of grunt
		open: {
			dev: {
				path: 'http://localhost:8080/index.html'
			}
		},
		/**
			watch
			*/
		// watch
		watch: {
			options: {
				livereload: true
			},
			// javascript
			scripts: {
				files: 'source/**/*.js',
			//	tasks: ['concat','replace','usebanner:javascript','uglify']
				tasks: ['concat','replace','usebanner:javascript']
			},
			css: {
				files: ['source/css/**/*.css'],
				tasks: ['copy:css','cssmin']
			},
			html: {
				files: ['source/html/**/*.html'],
				tasks: ['copy:html']
			},
			config: {
				files: ['source/config/*.json'],
				tasks: ['copy:config']
			},
			images: {
				files: ['source/images/**/*.png','source/images/**/*.jpg','source/images/**/*.json'],
				tasks: ['copy:images']
			},
		},
		/**
			individual tasks
			*/
		// make clean
		clean: {
			deleteReleaseDir: {
				src: 'release/'
			}
		},
		// files to be copied over to the release directory
		copy : {
			options: {
				dot: false
			},
			html : {
				files : [{expand:true, cwd:'source/html/', src:'*.html', dest:'release/'}]
			},
			js_html : {
				files : [{expand:true, cwd:'source/js/html/', src:'*.js', dest:'release/js/html/'}]
			},
			css : {
				files : [{expand:true, cwd:'source/css/', src:'*.css', dest:'release/css/'}]
			},
			license : {
				files : [{expand:true, cwd:'source/license/', src:'*', dest:'release/license/'}]
			},
			config : {
				files : [{expand:true, cwd:'source/config/', src:'*.json', dest:'release/config/'}]
			},
			// phaser lib is not contatenated because the library is too huge (taking too much time for processing).
			phaser : {
				files : [{expand:true, cwd:'source/js/phaser/', src:'phaser.*', dest:'release/js/'}]
			},
			// images: warning - do not edit / maintain images in the release dir because they will all be erased upon clean-build
			images: {
				files : [{expand:true, cwd:'source', src:['images/**/*.jpg','images/**/*.png','images/**/*.json'], dest:'release'}]
			},
			// fonts
			fonts: {
				files : [{expand:true, cwd:'source/fonts/', src:['*.eot','*.woff2','*.woff','*.ttf','*.svg'], dest:'release/fonts/'}]
			},
			// sound files. Only mp3 & ogg files are copied
			sound: {
				files : [{expand:true, cwd:'source/sound/', src:['*.ogg','*.m4a'], dest:'release/sound/'}]
			},
		},
		// version number
		replace: {
			example: {
				src: ['release/js/<%= pkg.name %>.js'],
				overwrite: true,
				replacements: [{
					from: "DO_NOT_TOUCH_AUTOGENERATED_GAME_VRESION",
					to: auto_generated_game_version
				}]
			}
		},
		// concatenate js files into one
		concat: {
			main: {
				src: [
				"source/js/game/**/*.js"
				],
				dest: 'release/js/<%= pkg.name %>.js'
			},
			// all the libs are expected to be uglified already
			lib: {
				src: [
				"source/js/lib/**/*.js"
				],
				dest: 'release/js/<%= pkg.name %>-libs.js'
			}
		},
		// uglify js
		uglify: {
			main: {
				src: "release/js/<%= pkg.name %>.js",
				dest: "release/js/<%= pkg.name %>.min.js"
			},
			lib: {
				src: "release/js/<%= pkg.name %>-libs.js",
				dest: "release/js/<%= pkg.name %>-libs.min.js"
			},
		},
		// organize media queries in css
		cmq:{
			options: {
				log: false
			},
			files: {
				'release/css/': ['release/css/styles.css']
			}
		},
		autoprefixer: {
			options: {
				browsers: ['last 2 version', 'ie 9']
			},
			dist:{
				src: 'release/css/styles.css'
			},
		},
		csscomb:{
			css_style: {
				'release/css/styles.css': 'release/css/styles.css'
			}
		},
		// banner
		usebanner: {
			css: {
				options: {
					position: 'top',
					banner: '/*! <%= pkg.name %> by <%= pkg.author.name %> Version: <%= pkg.version %> Compiled at: <%= grunt.template.today("yyyy-mm-dd HH:MM:ss Z") %> */'
				},
				files: {
					src: ['release/css/*.css']
				}
			},
			javascript: {
				options: {
					position: 'top',
					banner: '/*! <%= pkg.name %> by <%= pkg.author.name %> Version: <%= pkg.version %> Compiled at: <%= grunt.template.today("yyyy-mm-dd HH:MM:ss Z") %> */'
				},
				files: {
					src: [ 'release/js/<%= pkg.name %>.js']
				}
			}
		},
		cssmin : {
			options: {
				banner: '<%= banner %>'
			},
			target: {
				files: [{
					expand: true,
					cwd: 'release/css',
					src: ['*.css', '!*.min.css'],
					dest: 'release/css',
					ext: '.min.css'
				}]
			}
		},
	});
};